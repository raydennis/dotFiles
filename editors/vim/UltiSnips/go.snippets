snippet terraformOptions
	terraformOptions := &terraform.Options{
		TerraformDir: "../root/toWinVm-example",
		VarFiles:     []string{"../root/toWinVm-example/env/staging.tfvars"},
		Vars: map[string]interface{}{
			"keyvault-domain-admin": keyvault_domain_admin,
			"keyvault-local-admin":  keyvault_local_admin,
			"name":                  name,
			"env":                   environment,
		},
		BackendConfig: map[string]interface{}{
			"resource_group_name":  "tstate",
			"storage_account_name": "tstate6269",
			"container_name":       "tstate",
			"key":                  key,
		},
	}
endsnippet

snippet http_helper.HttpGetWithRetryWithCustomValidation
http_helper.HttpGetWithRetryWithCustomValidation(t, url, nil, 10, 10*time.Second, func(status int, content string) bool {
		return status == 200 &&
		strings.Contains(content, "Have your code ready?") &&
		strings.Contains(content, "Don't have your code yet?")
		})
endsnippet

snippet mageTemplateTerratest "mage template for terratest"

// +build mage

// Build a script to format and run tests of a Terraform module project
package main

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/magefile/mage/mg"
	"github.com/magefile/mage/sh"
)

// A build step that runs Clean, Format, Unit and Integration in sequence
func Full() {
	mg.Deps(Unit)
	mg.Deps(Integration)
}

// A build step that runs sanity tests
func Sanity() error {
	mg.Deps(Clean)
	mg.Deps(Format)
	fmt.Println("Running sanity tests...")
	return sh.RunV("go", "test", "./test/", "-run", "TestST_", "-v")
}

// A build step that runs unit tests
func Unit() error {
	mg.Deps(Clean)
	mg.Deps(Format)
	fmt.Println("Running unit tests...")
	return sh.RunV("go", "test", "./test/", "-run", "TestUT_", "-v")
}

// A build step that runs integration tests
func Integration() error {
	mg.Deps(Clean)
	mg.Deps(Format)
	fmt.Println("Running integration tsts...")
	return sh.RunV("go", "test", "./test/", "-run", "TestIT_", "-v")
}

// A build step that formats both Terraform code and Go code
func Format() error {
	fmt.Println("Formatting...")
	if err := sh.RunV("terraform", "fmt", "."); err != nil {
		return err
	}
	return sh.RunV("go", "fmt", "./test/")
}

// A build step that removes temporary build and test files
func Clean() error {
	fmt.Println("Cleaning...")
	return filepath.Walk(".", func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if info.IsDir() && info.Name() == "vendor" {
			return filepath.SkipDir
		}
		if info.IsDir() && info.Name() == ".terraform" {
			os.RemoveAll(path)
			fmt.Printf("Removed \"%v\"\n", path)
			return filepath.SkipDir
		}
		if !info.IsDir() && (info.Name() == "terraform.tfstate" ||
			info.Name() == "terraform.tfplan" ||
			info.Name() == "terraform.tfstate.backup") {
			os.Remove(path)
			fmt.Printf("Removed \"%v\"\n", path)
		}
		return nil
	})
}
endsnippet

snippet mageTemplate "General magefile template" 

// +build mage

// Build a script to format and run tests of a Terraform module project
package main

import (
	"fmt"
	"os"

	"github.com/magefile/mage/mg"
	"github.com/magefile/mage/sh"
)

// A build step that runs Clean, Format, Unit and Integration in sequence
func Full() {
	mg.Deps(Unit)
	mg.Deps(Integration)
}


// A build step that runs unit tests
func Unit() error {
	fmt.Println("Running unit tests...")
	return sh.RunV("go", "test", "./test/", "-run", "TestUT_", "-v")
}

// A build step that runs integration tests
func Integration() error {
	fmt.Println("Running integration tsts...")
	return sh.RunV("go", "test", "./test/", "-run", "TestIT_", "-v")
}

endsnippet

snippet terratestTemplate "General template for terratest"
package test

import (
	"fmt"
	"os/exec"
	"testing"

	http_helper "github.com/gruntwork-io/terratest/modules/http-helper"
)

// https://github.com/bridgecrewio/checkov
func TestUT_Test(t *testing.T) {
	cmd := exec.Command("ls")
	out, err := cmd.CombinedOutput()
	if err != nil {
		t.Error(err)
	}
	fmt.Printf("combined out:\n%s\n", string(out))
}

func TestIT_WebPage(t *testing.T) {
    url := "http://www.duckduckgo.com"
	http_helper.HttpGet(t, url, nil)
}

endsnippet
