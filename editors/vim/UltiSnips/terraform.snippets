snippet resource
resource "${1:}" "${2:}" {
}
endsnippet

snippet resource-group "Create a resource group if it doesnâ€™t exist" -b
resource "azurerm_resource_group" "myterraformgroup" {
    name     = "myResourceGroup"
    location = "westus2"

    tags = {
        environment = "Terraform Demo"
    }
}
endsnippet

snippet resource-virtual-network
resource "azurerm_virtual_network" "myterraformnetwork" {
    name                = "myVnet"
    address_space       = ["10.0.0.0/16"]
    location            = "westus2"
    resource_group_name = azurerm_resource_group.myterraformgroup.name

    tags = {
        environment = "Terraform Demo"
    }
}
endsnippet

snippet resource-subnet
resource "azurerm_subnet" "myterraformsubnet" {
    name                 = "mySubnet"
    resource_group_name  = azurerm_resource_group.myterraformgroup.name
    virtual_network_name = azurerm_virtual_network.myterraformnetwork.name
    address_prefix       = "10.0.1.0/24"
}
endsnippet

snippet resoure-public-ips
resource "azurerm_public_ip" "myterraformpublicip" {
    name                         = "myPublicIP"
    location                     = "westus2"
    resource_group_name          = azurerm_resource_group.myterraformgroup.name
    allocation_method            = "Dynamic"

    tags = {
        environment = "Terraform Demo"
    }
}
endsnippet

snippet resource-nsg
resource "azurerm_network_security_group" "myterraformnsg" {
    name                = "myNetworkSecurityGroup"
    location            = "westus2"
    resource_group_name = azurerm_resource_group.myterraformgroup.name
    
    security_rule {
        name                       = "RDP"
        priority                   = 1001
        direction                  = "Inbound"
        access                     = "Allow"
        protocol                   = "Tcp"
        source_port_range          = "*"
        destination_port_range     = "3389"
        source_address_prefix      = "*"
        destination_address_prefix = "*"
    }

    tags = {
        environment = "Terraform Demo"
    }
}
endsnippet

snippet resource-nic
resource "azurerm_network_interface" "myterraformnic" {
    name                      = "myNIC"
    location                  = "westus2"
    resource_group_name       = azurerm_resource_group.myterraformgroup.name
    network_security_group_id = azurerm_network_security_group.myterraformnsg.id

    ip_configuration {
        name                          = "myNicConfiguration"
        subnet_id                     = azurerm_subnet.myterraformsubnet.id
        private_ip_address_allocation = "Dynamic"
        public_ip_address_id          = azurerm_public_ip.myterraformpublicip.id
    }

    tags = {
        environment = "Terraform Demo"
    }
}
endsnippet

snippet resource-random_id "Generate random text for a unique storage account name" -b
resource "random_id" "randomId" {
    keepers = {
        endsnippet
snippet Generate a new ID only when a new resource group is defined
        resource_group = azurerm_resource_group.myterraformgroup.name
    }
    
    byte_length = 8
}
endsnippet

snippet resource-storage 
resource "azurerm_storage_account" "mystorageaccount" {
    name                        = "diag${random_id.randomId.hex}"
    resource_group_name         = azurerm_resource_group.myterraformgroup.name
    location                    = "westus2"
    account_tier                = "Standard"
    account_replication_type    = "LRS"

    tags = {
        environment = "Terraform Demo"
    }
}
endsnippet

snippet resource-vm
resource "azurerm_virtual_machine" "myterraformvm" {
    name                  = "myVM"
    location              = "westus2"
    resource_group_name   = azurerm_resource_group.myterraformgroup.name
    network_interface_ids = [azurerm_network_interface.myterraformnic.id]
    vm_size               = "Standard_DS1_v2"

    storage_os_disk {
        name              = "myOsDisk"
        caching           = "ReadWrite"
        create_option     = "FromImage"
        managed_disk_type = "Premium_LRS"
    }


  storage_image_reference {
      publisher = "MicrosoftWindowsServer"
      offer     = "WindowsServer"
      sku       = "2016-Datacenter"
      version   = "latest"
    }

    os_profile {
        computer_name  = "myvm"
        admin_username = "azureuser"
        admin_password = "complexPassW0rd!"
    }

	# with secret
	# admin_username = "${var.keyvault_secret}"
	# admin_password = "${data.azurerm_key_vault_secret.secret.value}"

    os_profile_windows_config {
      provision_vm_agent = true
    }

    boot_diagnostics {
        enabled = "true"
        storage_uri = azurerm_storage_account.mystorageaccount.primary_blob_endpoint
    }

    tags = {
        environment = "Terraform Demo"
    }
}
endsnippet

snippet keyvault-secret
# variables (can be moved to another file if needed)
variable "keyvault-resourcegroup" {
  default = "nwm-keyvault-rg"
}

variable "keyvault_name" {
  default = "nwm-admin-key-vault"
}

variable "keyvault_secret" {
  default = "nwmadmin"
}

# data
data "azurerm_resource_group" "keyvault-resourcegroup" {
  name = "${var.keyvault-resourcegroup}"
}

data "azurerm_key_vault" "keyvault" {
  name = "${var.keyvault_name}" 
  resource_group_name = "${data.azurerm_resource_group.keyvault-resourcegroup.name}" 
}

data "azurerm_key_vault_secret" "secret" {
  name = "${var.keyvault_secret}"
  vault_uri = "${data.azurerm_key_vault.keyvault.vault_uri}"
}
endsnippet

snippet provider_azurerm
provider "azurerm" {
  features {}
}
endsnippet

snippet module_compute
module "my-compute" {
  source = "../modules/compute"
  name = "sandbox"
}
endsnippet

snippet variable
variable "${1:name}" {
  description = "${2:The name of this resource, will be prefixed to each resource}"
  type        = ${3:string}
}
endsnippet

snippet locals
locals {
  name_env = "${var.name}_${var.env}"
}
endsnippet

snippet resource-azurerm_frontdoor_firewall_policy
resource "azurerm_frontdoor_firewall_policy" "example" {
  name                              = "exampleFDWAFPolicy"
  resource_group_name               = azurerm_resource_group.group.name
  enabled                           = true
  mode                              = "Prevention"
  redirect_url                      = "https://www.contoso.com"
  custom_block_response_status_code = 403
  custom_block_response_body        = "PGh0bWw+CjxoZWFkZXI+PHRpdGxlPkhlbGxvPC90aXRsZT48L2hlYWRlcj4KPGJvZHk+CkhlbGxvIHdvcmxkCjwvYm9keT4KPC9odG1sPg=="

  custom_rule {
    name                           = "CustomRule1"
    enabled                        = true
    priority                       = 1
    rate_limit_duration_in_minutes = 1
    rate_limit_threshold           = 10
    type                           = "MatchRule"
    action                         = "Block"

    match_condition {
      match_variable     = "RemoteAddr"
      operator           = "IPMatch"
      negation_condition = false
      match_values       = ["192.168.1.0/24", "10.0.0.0/24"]
    }
  }

  managed_rule {
    type    = "DefaultRuleSet"
    version = "1.0"

    exclusion {
      match_variable = "QueryStringArgNames"
      operator       = "Equals"
      selector       = "not_suspicious"
    }

    override {
      rule_group_name = "SQLI"

      exclusion {
        match_variable = "QueryStringArgNames"
        operator       = "Equals"
        selector       = "really_not_suspicious"
      }

      rule {
        rule_id = "942200"
        action  = "Block"

        exclusion {
          match_variable = "QueryStringArgNames"
          operator       = "Equals"
          selector       = "innocent"
        }
      }
    }
  }

  managed_rule {
    type    = "Microsoft_BotManagerRuleSet"
    version = "1.0"
  }
}
endsnippet

snippet resource-azurerm_frontdoor
resource "azurerm_frontdoor" "frontdoor" {
  name                                         = "example-FrontDoor"
  resource_group_name                          = azurerm_resource_group.group.name
  enforce_backend_pools_certificate_name_check = false

  routing_rule {
    name               = "exampleRoutingRule1"
    accepted_protocols = ["Http", "Https"]
    patterns_to_match  = ["/*"]
    frontend_endpoints = ["exampleFrontendEndpoint1"]
    forwarding_configuration {
      forwarding_protocol = "MatchRequest"
      backend_pool_name   = "exampleBackendDockerWebApp"
    }
  }

  backend_pool_load_balancing {
    name = "exampleLoadBalancingSettings1"
  }

  backend_pool_health_probe {
    name = "exampleHealthProbeSetting1"
  }

  backend_pool {
    name = "exampleBackendDockerWebApp"
    backend {
      host_header = "example-resources-linuxdockerapp.azurewebsites.net"
      address     = "example-resources-linuxdockerapp.azurewebsites.net"
      http_port   = 80
      https_port  = 443
      weight      = 5
    }
    backend {
      host_header = "example-resources-windowsdockerapp.azurewebsites.net"
      address     = "example-resources-windowdockerapp.azurewebsites.net"
      http_port   = 80
      https_port  = 443
      weight      = 95
    }


    load_balancing_name = "exampleLoadBalancingSettings1"
    health_probe_name   = "exampleHealthProbeSetting1"
  }

  frontend_endpoint {
    name                                    = "exampleFrontendEndpoint1"
    host_name                               = "example-FrontDoor.azurefd.net"
    custom_https_provisioning_enabled       = false
    web_application_firewall_policy_link_id = "/subscriptions/2084802a-c402-4ace-902b-330b68cc51b0/resourceGroups/example-resources/providers/Microsoft.Network/frontdoorWebApplicationFirewallPolicies/exampleFDWAFPolicy"
  }
}
endsnippet

snippet ip_restiction 
ip_restriction {
  ip_address = "${1:147.243.0.0}/${2:16}"
}
endsnippet

snippet variable
variable "keyvault-resourcegroup" {
  default = "nwm-keyvault-rg"
}
endsnippet
